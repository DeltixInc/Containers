/* DO NOT EDIT THIS FILE - it is machine generated */
#include <inttypes.h>
#include "rtmath_containers_MemoryHelper.h"
#include "FastMemcpy.h"
#include<memory.h>

/* Header for class rtmath_containers_MemoryHelper */



/*__attribute__((constructor))
void init()
{
}

__attribute__((destructor))
void destroy()
{
}*/


 

/*
* Class:     rtmath_containers_MemoryHelper
* Method:    memMove
* Signature: ([BI[JII)V
*/
extern "C" JNIEXPORT void JNICALL Java_rtmath_containers_MemoryHelper_fastMemMove
(JNIEnv *env, jclass obj, jbyteArray source, jint sourceOffset, jlongArray destination, jint destinationOffset, jint size) {
    jboolean isCopy = false;
    uint8_t *sourceData = (uint8_t *)env->GetPrimitiveArrayCritical(source, &isCopy);
    uint8_t *destinationData = (uint8_t *)env->GetPrimitiveArrayCritical(destination, &isCopy);

    memcpy((destinationData + destinationOffset), (sourceData + sourceOffset), size);

    env->ReleasePrimitiveArrayCritical(source, sourceData, JNI_ABORT);
    env->ReleasePrimitiveArrayCritical(destination, destinationData, JNI_ABORT);
}

extern "C" JNIEXPORT void JNICALL JavaCritical_rtmath_containers_MemoryHelper_fastMemMove
(jint sourceLen, jbyte* source, jint sourceOffset, jint destinationLen, jlong* destination, jint destinationOffset, jint size) {
    jboolean isCopy = false;
    uint8_t *sourceData = (uint8_t *)source;
    uint8_t *destinationData = (uint8_t *)destination;

    memcpy((destinationData + destinationOffset), (sourceData + sourceOffset), size);

}




/*
 * Class:     rtmath_containers_MemoryHelper
 * Method:    memMove
 * Signature: ([BI[JII)V
 */
extern "C" JNIEXPORT void JNICALL Java_rtmath_containers_MemoryHelper_memMove
  (JNIEnv *env, jclass obj, jbyteArray source, jint sourceOffset, jlongArray destination, jint destinationOffset, jint size) {
  	jboolean isCopy = false;
  	uint8_t *sourceData = (uint8_t *)env->GetPrimitiveArrayCritical(source, &isCopy);
  	uint8_t *destinationData = (uint8_t *)env->GetPrimitiveArrayCritical(destination, &isCopy);

  	memcpy((destinationData + destinationOffset), (sourceData + sourceOffset), size);

  	env->ReleasePrimitiveArrayCritical(source, sourceData, JNI_ABORT);
  	env->ReleasePrimitiveArrayCritical(destination, destinationData, JNI_ABORT);
  }

extern "C" JNIEXPORT void JNICALL JavaCritical_rtmath_containers_MemoryHelper_memMove
(jint sourceLen, jbyte* source, jint sourceOffset, jint destinationLen, jlong* destination, jint destinationOffset, jint size) {
    jboolean isCopy = false;
    uint8_t *sourceData = (uint8_t *)source;
    uint8_t *destinationData = (uint8_t *)destination;

    memcpy((destinationData + destinationOffset), (sourceData + sourceOffset), size);

}


/*
 * Class:     rtmath_containers_MemoryHelper
 * Method:    getByte
 * Signature: ([JI)B
 */
extern "C" JNIEXPORT jbyte JNICALL Java_rtmath_containers_MemoryHelper_getByte
  (JNIEnv *env, jclass obj, jlongArray source, jint offset) {
  	jboolean isCopy = false;
  	uint8_t *sourceData = (uint8_t *)env->GetPrimitiveArrayCritical(source, &isCopy);

  	jbyte returnValue = *(sourceData + offset);

  	env->ReleasePrimitiveArrayCritical(source, sourceData, JNI_ABORT);
    return returnValue;
  
  
  }



/*
 * Class:     rtmath_containers_MemoryHelper
 * Method:    setByte
 * Signature: ([JIB)V
 */
extern "C" JNIEXPORT void JNICALL Java_rtmath_containers_MemoryHelper_setByte
  (JNIEnv *env, jclass obj, jlongArray ar, jint offset, jbyte value) {
  	jboolean isCopy = false;
  	uint8_t *arData = (uint8_t *)env->GetPrimitiveArrayCritical(ar, &isCopy);
	*(arData + offset) = value;	  
  	env->ReleasePrimitiveArrayCritical(ar, arData, JNI_ABORT);
  
  }




